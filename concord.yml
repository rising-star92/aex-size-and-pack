configuration:
  dependencies:
    - mvn://com.walmartlabs.concord.plugins:looper-task:1.22.1
  arguments:
    dev: https://aex-size-and-pack.aex.dev.walmart.net
    stg: https://aex-size-and-pack.aex.stg.walmart.net
    prod: https://aex-size-and-pack.aex.prod.walmart.net
profiles:
  dev:
    configuration:
      arguments:
        slackChannel: "#aex-sp-dev-alerts"
        consumerId: 19ce2bf5-4c24-4bbf-bee9-84496dd07e3c
        svcName: AEX_SIZE_AND_PACK
        env: dev
  stage:
    configuration:
      arguments:
        slackChannel: "#aex-sp-stage-alerts"
        consumerId: 93c617a1-31ec-4333-a819-683ef7514cc0
        svcName: AEX_SIZE_AND_PACK
        env: stg
  prod:
    configuration:
      arguments:
        slackChannel: "#aex-sp-stage-alerts"
        consumerId: 80eac37e-62ff-4d41-a106-c5bff13827e9
        svcName : AEX_SIZE_AND_PACK
        env: prod
flows:
  default:
    - log: "Trigger Size and Pack ResetRunPackOptStatus Job"

  DevBatch:
    - log: "DEV Size and Pack ResetRunPackOptStatus Job"
    - task: http
      in:
        method: POST
        connectTimeout: 1800000
        requestTimeout: 1800000
        url: "${dev}/graphql"
        request: json
        body: {"query":"\nquery ($planid: Int!, $channelid: Int!) {\n  getPackOptimizationValues(planid:$planid,channelid:$channelid) {\n    planId\n    lvl0Nbr\n    lvl0Desc\n    lvl1Nbr\n    lvl1Desc\n    lvl2Nbr\n    lvl2Desc\n    lvl3List {\n      lvl3Nbr\n      lvl3Name\n      constraints {\n        finelineLevelConstraints {\n          maxUnitsPerPack \n          maxPacks \n        }\n        colorCombinationConstraints {\n          factoryId\n          portOfOrigin\n          suppliers {\n            supplierName\n            vendorNumber6\n            gsmSupplierNumber\n            vendorNumber9\n          }\n          colorCombination\n          singlePackIndicator \n        }\n      }\n      lvl4List {\n        lvl4Nbr\n        lvl4Name\n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        finelines {\n          finelineNbr\n          finelineName\n          altFinelineName\n          optimizationDetails{\n            name\n            startTs\n            endTs\n            runStatusLongDesc\n            runStatusCode\n          }\n          packOptimizationStatus \n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        }\n      }\n    }\n  }\n}","variables":{"planid":12,"channelid":1}}
        headers:
          WM_CONSUMER.ID: '${consumerId}'
          WM_SVC.NAME: '${svcName}'
          WM_SVC.ENV: '${env}'
        response: json
        out: jsonResponse
      error:
        - task: slack
          in:
            channelId: '${slackChannel}'
            text: 'DEV - Failed to run Size and Pack ResetRunPackOptStatus Job '
            username: 'Pipeline'
            iconEmoji: ':concord:'
        - exit
    - log: "INFO : DEV Size and Pack ResetRunPackOptStatus Job : Success: ${jsonResponse}"

    - if: ${jsonResponse.success}
      then:
        - log: 'DEV Size and Pack ResetRunPackOptStatus Job Successfully triggered.'
      else:
        - task: slack
          in:
            channelId: '${slackChannel}'
            text: 'DEV: Failed to run Size and Pack ResetRunPackOptStatus Job'
            username: 'Pipeline'
            iconEmoji: ':concord:'
        - exit
  StgBatch:
    - log: "STG Size and Pack ResetRunPackOptStatus Job"
    - task: http
      in:
        method: POST
        connectTimeout: 1800000
        requestTimeout: 1800000
        url: "${stg}/graphql"
        request: json
        body: {"query": "\nquery ($planid: Int!, $channelid: Int!) {\n  getPackOptimizationValues(planid:$planid,channelid:$channelid) {\n    planId\n    lvl0Nbr\n    lvl0Desc\n    lvl1Nbr\n    lvl1Desc\n    lvl2Nbr\n    lvl2Desc\n    lvl3List {\n      lvl3Nbr\n      lvl3Name\n      constraints {\n        finelineLevelConstraints {\n          maxUnitsPerPack \n          maxPacks \n        }\n        colorCombinationConstraints {\n          factoryId\n          portOfOrigin\n          suppliers {\n            supplierName\n            vendorNumber6\n            gsmSupplierNumber\n            vendorNumber9\n          }\n          colorCombination\n          singlePackIndicator \n        }\n      }\n      lvl4List {\n        lvl4Nbr\n        lvl4Name\n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        finelines {\n          finelineNbr\n          finelineName\n          altFinelineName\n          optimizationDetails{\n            name\n            startTs\n            endTs\n            runStatusLongDesc\n            runStatusCode\n          }\n          packOptimizationStatus \n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        }\n      }\n    }\n  }\n}","variables": { "planid": 12,"channelid": 1 } }
        headers:
          WM_CONSUMER.ID: '${consumerId}'
          WM_SVC.NAME: '${svcName}'
          WM_SVC.ENV: '${env}'
        response: json
        out: jsonResponse
      error:
        - task: slack
          in:
            channelId: '${slackChannel}'
            text: 'STG - Failed to run Size and Pack ResetRunPackOptStatus Job '
            username: 'Pipeline'
            iconEmoji: ':concord:'
        - exit
    - log: "INFO : STG Size and Pack ResetRunPackOptStatus Job : Success: ${jsonResponse}"

    - if: ${jsonResponse.success}
      then:
        - log: 'STG Size and Pack ResetRunPackOptStatus Job Successfully triggered.'
      else:
        - task: slack
          in:
            channelId: '${slackChannel}'
            text: 'STG: Failed to run Size and Pack ResetRunPackOptStatus Job'
            username: 'Pipeline'
            iconEmoji: ':concord:'
        - exit
  ProdBatch:
    - log: "PROD Size and Pack ResetRunPackOptStatus Job"
    - task: http
      in:
        method: POST
        connectTimeout: 1800000
        requestTimeout: 1800000
        url: "${prod}/graphql"
        request: json
        body: {"query":"\nquery ($planid: Int!, $channelid: Int!) {\n  getPackOptimizationValues(planid:$planid,channelid:$channelid) {\n    planId\n    lvl0Nbr\n    lvl0Desc\n    lvl1Nbr\n    lvl1Desc\n    lvl2Nbr\n    lvl2Desc\n    lvl3List {\n      lvl3Nbr\n      lvl3Name\n      constraints {\n        finelineLevelConstraints {\n          maxUnitsPerPack \n          maxPacks \n        }\n        colorCombinationConstraints {\n          factoryId\n          portOfOrigin\n          suppliers {\n            supplierName\n            vendorNumber6\n            gsmSupplierNumber\n            vendorNumber9\n          }\n          colorCombination\n          singlePackIndicator \n        }\n      }\n      lvl4List {\n        lvl4Nbr\n        lvl4Name\n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        finelines {\n          finelineNbr\n          finelineName\n          altFinelineName\n          optimizationDetails{\n            name\n            startTs\n            endTs\n            runStatusLongDesc\n            runStatusCode\n          }\n          packOptimizationStatus \n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        }\n      }\n    }\n  }\n}","variables":{"planid":12,"channelid":1}}
        headers:
          WM_CONSUMER.ID: '${consumerId}'
          WM_SVC.NAME: '${svcName}'
          WM_SVC.ENV: '${env}'
        response: json
        out: jsonResponse
      error:
        - task: slack
          in:
            channelId: '${slack_channel}'
            text: 'PROD - Failed to run Size and Pack ResetRunPackOptStatus Job '
            username: 'Pipeline'
            iconEmoji: ':concord:'
        - exit
    - log: "INFO : PROD Size and Pack ResetRunPackOptStatus Job : Success: ${jsonResponse}"

    - if: ${jsonResponse.success}
      then:
        - log: 'PROD Size and Pack ResetRunPackOptStatus Job Successfully triggered.'
      else:
        - task: slack
          in:
            channelId: '${slack_channel}'
            text: 'PROD: Failed to run Size and Pack ResetRunPackOptStatus Job'
            username: 'Pipeline'
            iconEmoji: ':concord:'
        - exit
triggers:
  - cron:
      spec: "0/1 * * * * "
      entryPoint: DevBatch
