configuration:
  dependencies:
    - mvn://com.walmartlabs.concord.plugins:looper-task:1.22.1

profiles:
  dev:
    configuration:
      arguments:
        slackChannel: "#aex-sp-dev-alerts"
        consumerId: 19ce2bf5-4c24-4bbf-bee9-84496dd07e3c
        svcName: AEX_SIZE_AND_PACK
        env: dev
        url: https://aex-size-and-pack.aex.dev.walmart.net
  stage:
    configuration:
      arguments:
        slackChannel: "#aex-sp-stage-alerts"
        consumerId: 93c617a1-31ec-4333-a819-683ef7514cc0
        svcName: AEX_SIZE_AND_PACK
        env: stg
        url: https://aex-size-and-pack.aex.stg.walmart.net
  prod:
    configuration:
      arguments:
        slackChannel: "#aex-sp-stage-alerts"
        consumerId: 80eac37e-62ff-4d41-a106-c5bff13827e9
        svcName: AEX_SIZE_AND_PACK
        env: prod
        url: https://aex-size-and-pack.aex.prod.walmart.net
flows:
  fetchPackOptRunStatus:
    - log: "${env} Size and Pack ResetRunPackOptStatus Job"
    - call: post
      in:
        fetchPackOptRunStatusUrl: "${url}/graphql"
        fetchPackOptRunStatusBody:
          {
            "query": "\nquery ($planid: Int!, $channelid: Int!) {\n  getPackOptimizationValues(planid:$planid,channelid:$channelid) {\n    planId\n    lvl0Nbr\n    lvl0Desc\n    lvl1Nbr\n    lvl1Desc\n    lvl2Nbr\n    lvl2Desc\n    lvl3List {\n      lvl3Nbr\n      lvl3Name\n      constraints {\n        finelineLevelConstraints {\n          maxUnitsPerPack \n          maxPacks \n        }\n        colorCombinationConstraints {\n          factoryId\n          portOfOrigin\n          suppliers {\n            supplierName\n            vendorNumber6\n            gsmSupplierNumber\n            vendorNumber9\n          }\n          colorCombination\n          singlePackIndicator \n        }\n      }\n      lvl4List {\n        lvl4Nbr\n        lvl4Name\n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        finelines {\n          finelineNbr\n          finelineName\n          altFinelineName\n          optimizationDetails{\n            name\n            startTs\n            endTs\n            runStatusLongDesc\n            runStatusCode\n          }\n          packOptimizationStatus \n          constraints {\n            finelineLevelConstraints { \n              maxUnitsPerPack \n              maxPacks\n            }\n            colorCombinationConstraints {\n              factoryId\n              portOfOrigin\n              suppliers {\n                supplierName\n                vendorNumber6\n                gsmSupplierNumber\n                vendorNumber9\n              }\n              colorCombination\n              singlePackIndicator \n            }\n          }\n        }\n      }\n    }\n  }\n}",
            "variables": { "planid": 12, "channelid": 1 },
          }
      error:
        - call: notifySlack
          in:
            slackErrorText: "${env} - Failed to run Size and Pack ResetRunPackOptStatus Job "
        - exit
    - log: "INFO : ${env} Size and Pack ResetRunPackOptStatus Job : Success: ${jsonResponse}"
    - if: ${jsonResponse.success}
      then:
        - log: "${env} Size and Pack ResetRunPackOptStatus Job Successfully triggered."
      else:
        - call: notifySlack
          in:
            slackErrorText: "${env}: Failed to run Size and Pack ResetRunPackOptStatus Job"
        - exit

  post:
    - task: http
      in:
        method: POST
        connectTimeout: 1800000
        requestTimeout: 1800000
        url: "${fetchPackOptRunStatusUrl}"
        request: json
        body: "${fetchPackOptRunStatusBody}"
        headers:
          WM_CONSUMER.ID: "${consumerId}"
          WM_SVC.NAME: "${svcName}"
          WM_SVC.ENV: "${env}"
        response: json
        out: jsonResponse

  notifySlack:
    - task: slack
      in:
        channelId: "${slackChannel}"
        text: "${slackErrorText}"
        username: "Pipeline"
        iconEmoji: ":concord:"

triggers:
  - cron:
    spec: "0/5 * * * *"
    entryPoint: fetchPackOptRunStatus
    activeProfiles:
      - dev
  - cron:
    spec: "0/5 * * * *"
    entryPoint: fetchPackOptRunStatus
    activeProfiles:
      - stg
  - cron:
    spec: "* 1 * * *"
    entryPoint: fetchPackOptRunStatus
    activeProfiles:
      - prod
