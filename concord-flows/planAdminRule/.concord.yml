configuration:
  runtime: "concord-v2"
  arguments:
    group: "CN=apparel-precision-kitt,.*"

profiles:
  dev:
    configuration:
      arguments:
        spBaseUrl: "aex-size-and-pack.aex.dev.walmart.net"
        spGraphQlEndpoint: "http://aex-size-and-pack.aex.dev.walmart.net/graphql"
        consumerId: "34f7ca77-3dfc-46df-a86b-1ba6e4908d0e"
        serviceName: "AEX_SIZE_AND_PACK"
        env: dev

publicFlows:
  - planAdminRuleForm

forms:
  addPlanAdminRuleForm:
    - action: { label: "Select the action", type: "string", allow: [ "ADD","UPDATE" ]}
    - planId: { label: "Enter Plan ID ", type: "int", min: 0, max: 99999 }
    - deptNbr: { label: "Enter Department Number ", type: "int", min: 0, max: 99999 }
    - replenishmentItemPieceRule: { label: "Enter the Replenishment Item Piece rule", type: "int", min: 0, max: 99999 }
    - minReplenishmentQtyByItem: { label: "Enter the Minimum Replenishment Qty By Item", type: "int", min: 0, max: 99999 }

flows:
  managePlanAdminRulesToDB:
    - if: ${action == "ADD"}
      then:
        - call: addPlanAdminRuleToDB
      else:
        - call: updatePlanAdminRuleToDB
      in:
        planAdminRuleRequests:
          planId: ${planId}
          deptNbr: ${deptNbr}
          replItemPieceRule: ${replItemPieceRule}
          minReplItemUnits: ${minReplItemUnits}

  planAdminRuleForm:
    - call: validateProfile
    - form: addPlanAdminRuleForm
      runAs:
        ldap:
          - group: ${group}
    - log: "Starting - Adding Plan Admin Rules"
    - call: managePlanAdminRulesToDB
      in:
        action: ${addPlanAdminRuleForm.action}
        planId: ${addPlanAdminRuleForm.planId}
        deptNbr: ${addPlanAdminRuleForm.deptNbr}
        replItemPieceRule: ${addPlanAdminRuleForm.replenishmentItemPieceRule}
        minReplItemUnits: ${addPlanAdminRuleForm.minReplenishmentQtyByItem}

  validateProfile:
    - if: ${env.isEmpty()}
      then:
        - log: "Profile was not provided"
        - exit

  addPlanAdminRuleToDB:
    - log: "Adding Plan Admin rule: ${planAdminRuleRequests}"
    - task: http
      in:
        method: POST
        url: ${spGraphQlEndpoint}
        request: json
        body:
          query : "mutation addPlanAdminRules($planAdminRuleRequests: [PlanAdminRuleRequest]!) {\n    addPlanAdminRules(planAdminRuleRequests: $planAdminRuleRequests){\n        status\n        message\n }\n}"
          variables :
            planAdminRuleRequests: ${planAdminRuleRequests}
        headers:
          content-type: "application/json"
          WM_CONSUMER.ID: ${consumerId}
          WM_SVC.NAME: ${serviceName}
          WM_SVC.ENV: ${env}
        response: json
      out: response
    - if: ${not response.ok}
      then:
        - log: "Add Plan Admin Rule Failed: ${response.error}"
      else:
        - log: "PlanId ${planId} was added Successfully: ${response}"

  updatePlanAdminRuleToDB:
    - log: "Update Plan Admin rule: ${planAdminRuleRequests}"
    - task: http
      in:
        method: POST
        url: ${spGraphQlEndpoint}
        request: json
        body:
          query: "mutation updatePlanAdminRules($planAdminRuleRequests: [PlanAdminRuleRequest]!) {\n    updatePlanAdminRules(planAdminRuleRequests: $planAdminRuleRequests){\n        status\n        message\n\n }\n\n}"
          variables:
            planAdminRuleRequests: ${planAdminRuleRequests}
        headers:
          content-type: "application/json"
          WM_CONSUMER.ID: ${consumerId}
          WM_SVC.NAME: ${serviceName}
          WM_SVC.ENV: ${env}
        response: json
      out: response
    - if: ${not response.ok}
      then:
        - log: "Update Plan Admin Rule Failed: ${response.error}"
      else:
        - log: "PlanId ${planId} was updated Successfully: ${response}"