type Query {
     getPackOptimizationValues(planid: Int!, channelid : Int!): PackOptimizationResponse!
     getFinelineBuyQtyDetails(buyQtyRequest: BuyQtyRequest!): BuyQtyResponse!
     getCcBuyQtyDetails(buyQtyRequest: BuyQtyRequest!, finelineNbr: Int!): BuyQtyResponse!
     fetchReplnByPlan(replenishmentRequest: ReplenishmentRequest!): ReplenishmentResponse!
     fetchReplnByPlanFineline(replenishmentRequest: ReplenishmentRequest!): ReplenishmentResponse!
     fetchReplnByPlanFinelineStyleCc(replenishmentRequest: ReplenishmentRequest!): ReplenishmentResponse!
     getSizeBuyQtyDetails(buyQtyRequest: BuyQtyRequest!): BuyQtyResponse!
     fetchHistoricalMetricsFineline(request: HistoricalMetricsRequest!) : HistoricalMetricsResponse!
     fetchHistoricalMetricsCC(request: HistoricalMetricsRequest!) : HistoricalMetricsResponse!
     getInitialAndBumpSetDetails(request: InitialSetPackRequest): InitialBumpSetResponse!
     fetchInitialSetBumpPackByPlanFineline(request: BuyQtyRequest!): BuyQtyResponse!
     fetchReplnFullHierarchyByPlanFineline(replenishmentRequest: ReplenishmentRequest!): ReplenishmentResponse!
}


type Mutation {
	updateReplnConfigByCategory(request: UpdateVnPkWhPkReplnRequest!): UpdateVnPkWhPkResponse
	updateReplnConfigBySubCategory(request: UpdateVnPkWhPkReplnRequest!): UpdateVnPkWhPkResponse
	updateReplnConfigByCc(request: UpdateVnPkWhPkReplnRequest!): UpdateVnPkWhPkResponse!
	updateReplnConfigByStyle(request: UpdateVnPkWhPkReplnRequest!):UpdateVnPkWhPkResponse!
	updateReplnConfigByFineline(request: UpdateVnPkWhPkReplnRequest!):UpdateVnPkWhPkResponse!
	updateReplnConfigByCcMerchMethod(request: UpdateVnPkWhPkReplnRequest!): UpdateVnPkWhPkResponse
	updateReplnConfigByCcSpMmSize(request: UpdateVnPkWhPkReplnRequest!): UpdateVnPkWhPkResponse
    calculateBuyQty(calculateBuyQtyRequest: CalculateBuyQtyRequest!): StatusResponse!
    createRunPackOptExecution(request: RunPackOptRequest!): RunPackOptResponse
}

input UpdateVnPkWhPkReplnRequest {
	planId: Int!
	planDesc: String
	channel: String!
	lvl3Nbr: Int
	lvl4Nbr: Int
	fineline: Int
	style: String
	customerChoice: String
	merchMethodDesc: String
	ahsSizeId: Int
	vnpk: Int
	whpk: Int
	repleshUnits: Int
}

input CalculateBuyQtyRequest {
    planId: Int
    channel: String
    planDesc: String
    lvl0Nbr: Int
    lvl1Nbr: Int
    lvl2Nbr: Int
    lvl3List:[Lvl3Request]
}

input Lvl3Request {
    lvl3Nbr: Int
    lvl3Desc: String
    lvl4List:[Lvl4Request]
}

input Lvl4Request {
    lvl4Nbr: Int
    lvl4Name: String
    finelines: [FinelineRequest]
}

input FinelineRequest {
    finelineNbr: Int
    finelineName: String
    styles:[StyleRequest]
}

input InitialSetPackRequest{
	planId: Int
	finelineNbr: Int
}

input StyleRequest {
    styleNbr: String
    customerChoices:[CustomerChoiceRequest]
}

input CustomerChoiceRequest {
    ccId: String
}

type InitialBumpSetResponse{
	finelineNbr: Int
	intialSetStyles: [IntialSetStyle]
}

type IntialSetStyle{
	styleId: String
	initialSetPlan: [InitialSetPlan]
}

type InitialSetPlan{
	inStoreWeek: String
	packDetails: [PackDetails]
}

type PackDetails{
	packId: String
	metrics: [Metrics]
}

type Metrics{
	size: String
	ratio: Int
	quantity: Int
	ccId: String
	merchMethod: String
}

type StatusResponse {
    status: String!
}



type UpdateVnPkWhPkResponse {
	status: String!
}

type PackOptimizationResponse{
    planId: Int!
    channel:Int!
    lvl3List: [Lvl3]
}

type Lvl3 {
    lvl0Nbr:Int
    lvl1Nbr:Int
    lvl2Nbr:Int
    lvl3Nbr: Int
    lvl3Name: String
    constraints:Constraints
   	lvl4List: [Lvl4]
}

type Constraints{
 supplierConstraints:SupplierConstraints
 ccLevelConstraints:[CcLevelConstraints]
}

type SupplierConstraints{
   supplierName:String
   maxUnitsPerPack:Int
   maxPacks:Int
}

type CcLevelConstraints{
 factoryIds:String
 countryOfOrigin:String 
 portOfOrigin:String
 singlePackIndicator:Int	
 colorCombination:String 
}

type Lvl4 {
    lvl4Nbr: Int
    lvl4Name: String
    constraints:Constraints
    finelines: [Fineline]
}

type Fineline {
    finelineNbr: Int
    finelineName: String
    altFinelineName: String
    optimizationDetails: [RunOptimization]
    packOptimizationStatus: String
    constraints:Constraints
    styles:[Style]
}
type RunOptimization{
    name: String
    startTs: String
    endTs: String
    returnMessage: String
    runStatusCode: Int
}

type Style {
    styleNbr: String
    constraints:Constraints
    customerChoices:[CustomerChoice]
}

type CustomerChoice {
    ccId: String
    colorName: String
    constraints:Constraints
    
}

input BuyQtyRequest {
    planId: Int!
    planDesc: String
    channel: String
    lvl3Nbr: Int
    lvl4Nbr: Int
    finelineNbr: Int
    styleNbr: String
    ccId: String
}

type BuyQtyResponse {
    planId: Int
    planDesc: String
    lvl0Nbr: Int
    lvl0Desc: String
    lvl1Nbr: Int
    lvl1Desc: String
    lvl2Nbr: Int
    lvl2Desc: String
    lvl3List:[Lvl3Dto]
}

type Lvl3Dto {
    lvl3Nbr: Int
    lvl3Desc: String
    lvl4List:[Lvl4Dto]
    metrics: MetricsDto
}

type Lvl4Dto {
    lvl4Nbr: Int
    lvl4Desc: String
    finelines: [FinelineDto]
    metrics: MetricsDto
}

type FinelineDto {
    finelineNbr: Int
    channelId: Int
    finelineDesc: String
    finelineAltDesc: String
    metrics: MetricsDto
    clusters: [ClustersDto]
    styles: [StyleDto]
    }

type StyleDto {
    styleNbr: String
    channelId: Int
    metrics: MetricsDto
    clusters: [ClustersDto]
    customerChoices: [CustomerChoiceDto]
}

type CustomerChoiceDto {
    ccId: String
    channelId: Int
    colorName: String
    metrics: MetricsDto
    clusters: [ClustersDto]
    merchMethods : [MerchMethodsDto]
  
}

type ClustersDto {
    clusterID: Int
    sizes: [SizeList]
}

type SizeList {
    ahsSizeId: Int
    sizeDesc: String
    metrics: MetricsDto
}

type MetricsDto {
    sizeProfilePct:Float
    adjSizeProfilePct:Float
    avgSizeProfilePct:Float
    adjAvgSizeProfilePct:Float
    bumpPackQty:Int
    buyQty:Int
    finalBuyQty:Int
    finalInitialSetQty:Int
    finalReplenishmentQty:Int
    vendorPack: Int
    warehousePack: Int
    packRatio: Float
    replenishmentPacks: Int
}

type MerchMethodsDto {
    merchMethod: String
    metrics: MetricsDto
    sizes: [SizeDto]
}

type ReplenishmentResponse {
    planId: Int
    planDesc: String
    lvl0Nbr: Int
    lvl0Desc: String
    lvl1Nbr: Int
    lvl1Desc: String
    lvl2Nbr: Int
    lvl2Desc: String
    lvl3List:[Lvl3Dto]
}

type SizeDto {
     ahsSizeId: Int
     sizeDesc: String
     metrics: MetricsDto
     replenishments:[Replenishment]
}
type Replenishment{
   replnWeek: Int
   replnWeekDesc: String
   replnUnits: Int
   adjReplnUnits: Int
   remainingUnits: Int
   dcInboundUnits: Int
   dcInboundAdjUnits: Int
}

input ReplenishmentRequest {
    planId: Int!
    planDesc: String
    channel: String!
    finelineNbr: Int
    styleNbr: String
    ccId: String
}

input RunPackOptRequest {
  planId: Int
  inputRequest: InputRequest
  runUser: String
}

input InputRequest {
     lvl0Nbr: Int
     lvl1Nbr: Int
     lvl2Nbr: Int
     lvl3List:[Lvl3Request]
}

type RunPackOptResponse {
  execution: Execution
}

type Execution {
  id: Int
  statusCode: Int
  statusDesc: String
  validationMessage: String
}


input HistoricalMetricsRequest {
  planId: Int!
  lvl3Nbr: Int!
  lvl4Nbr: Int!
  finelineNbr: Int
  channel: String!
}

type HistoricalMetricsResponse {
  metrics: [HistoricalMetric]
}

type HistoricalMetric {
  sizeDesc: String
  lyActualSalesUnits: Int
  lyActualSalesUnitsPct: Float
  lyActualReceiptUnits: Int
  lyActualReceiptUnitsPct: Float
}